name,ring,quadrant,isNew,description
"JavaScript",adopt,"Languages and Frameworks",false,"JavaScript is our main programming langauge for FrontEnd"
"TypeScript",adopt,"Languages and Frameworks",true,"TypeScript helps to abstract our development"
"CSS 3",adopt,"Languages and Frameworks",false,"Defacto styling standard"
"SCSS",adopt,"Languages and Frameworks",false,"CSS preprocessor. Simplify CSS coding"
"JSON",adopt,"Languages and Frameworks",false,"Standard data structure"
"HTML 5",adopt,"Languages and Frameworks",false,"Defacto web styling standard"
"ES6+",adopt,"Languages and Frameworks",false,"Modern JS standard"
"Vue 2",adopt,"Languages and Frameworks",false,"Modern UI Framework, EOL around 1 year. It's on the path to deprecation."
"Open API Spec (OAS) Standard",trial,"Languages and Frameworks",true,"API spec writing standard. Can be used as input to generate codes automatically"
"Vue 3",trial,"Languages and Frameworks",true,"Next version of vue js. Wee need to adopt this as soon as possible and smoothly"
"Nodejs > 14",adopt,"Languages and Frameworks",false,"JS Engine, defacto"
"Nodejs <= 12",hold,"Languages and Frameworks",false,"Older JS Engine. We should replace it with latest LTS version (14 or 16)."
"React",hold,"Languages and Frameworks",false,"Popular JS library. We hold this library because it was hard to maintain in previous projects. Hard also to find someone capable of coding React properly"
"Angular",hold,"Languages and Frameworks",false,"Old JS framework. This is the first Angular. We used in old blibli.com UI. Hard to improve performance and very old in technology features"
"Jest",adopt,"Languages and Frameworks",false,"Simple test runner. It's proven to be fast to code and run. Moreover, it's very easy to scale"
"Vitest",trial,"Languages and Frameworks",true,"Official test runner for Vite.js"
"Eslint",adopt,"Languages and Frameworks",false,"Linter. It's used to provide quick style correction and applying good coding patterns."
"AMP",adopt,"Languages and Frameworks",false,"Web component framework for use in Google browsers"
"Karma+Mocha",hold,"Languages and Frameworks",false,"Previous test runner we used in webpack 2. Now it's left behind because it was hard to setup the test and configuring it."
"Nuxt.js 3",assess,"Languages and Frameworks",false,"Server side rendering with vue. This may be the future of Vue. We would love to have SSR to provide faster LCP"
"GraphQL",assess,"Languages and Frameworks",false,"Web query standard to be used for API end points. It can describe data join and filtered fields."
"Service worker",adopt,"Languages and Frameworks",false,"Web worker used to manage resources and background process for a website that can make it behave like a standalone application."
"Partytown",assess,"Languages and Frameworks",new,"Library to speed up site by offloading third-party scripts to a web worker. In hope of reducing main thread workload, to increase TBT / TTI"
"NPM",adopt,"Tools",false,"Defacto package manager. We will use it as default package manager for Frontend projects."
"PNPM",assess,"Tools",new,"New kid on the block package manager. The package download and installation process are done in parallel, increasing installation speed."
"Playwright < 1.16.x",adopt,"Tools",false,"Browser runner for automated testing. We use this to accomodate integration testing."
"Playwright 1.22.x",assess,"Tools",new,"Browser runner for automated testing. We use this to accomodate integration testing."
"Webpack",adopt,"Tools",false,"Popular packager. A simple configurable packager that's still used widely. In the future we may all move to Rollup."
"Rollup",adopt,"Tools",new,"Faster packager. Vite.js is using Rollup, thus the direction for Vue programmer will be using Rollup. Based on our experience, Rollup is a lot faster than Webpack"
"Parcel",hold,"Tools",new,"Hold because of inconsistent result (can't be used in webpack). We now use Rollup."
"Vite.js",adopt,"Tools",new,"New Vue packager. It's replacing vue-cli. Built on top of Rollup."
"vue-cli",hold,"Tools",false,"Vue project runner and builder for Vue 2. Currently it's being replaced by Vite.js"
"babel",adopt,"Tools",false,"JS transpiler. It transpile modern version of JS to a targetted one, such as from ES6 to ES5"
"lighthouse",adopt,"Tools",false,"Web benchmarker. The output is performance reports along with SEO, accessibility, best practices and PWA scores. It's official web benchmarker from Google."
"lerna",hold,"Tools",false,"Multi repo package manager, hold because of no update. Its role is being replace by NPM workspaces"
"NPM workspaces",assess,"Tools",new,"NPM official multi repo package manager. We can use it to build multiple project at once. It may be useful for tightly dependent libraries but managed in different projects"
"@blibli/integration-test-tools",adopt,"Tools",new,"Run integration test easily with this library. It automate docker run and micro FE' main project pull and run."
"@blibli/dev-tools",trial,"Tools",new,"Tools to automate packaging and Dockerfile creation. It's being rollout in several projects."
"@blibli/performance-audit",assess,"Tools",new,"Performance auditing and budgeting library for local and jenkins environment"
"node-sass",hold,"Tools",false,"SASS transpiler based on C. It's deprecated now, because no update for a long time. Dart-sass or just sass is the replacement. Using node-sass is also a great hassle, as it needs to compile the binary from source every time we do 'npm install'"
"dart-sass / sass",adopt,"Tools",false,"SASS transpiler based on dart. It's now the commonly used sass transpiler. The binary runs directly without compiling from source"
"Yarn",hold,"Tools",false,"Popular package manager. We are not recommending using it because it has deviated quite much from the official package manager (NPM)"
"pinia",adopt,"Libraries",true,"Agnostic and modular state management"
"vuex",adopt,"Libraries",false,"State management for Vue. It's used to share states/variables across components"
"JQuery",hold,"Libraries",false,"Old-school coding. This library is not used anymore. All functionalities in JQuery are available in ES6+ and native browser APIs"
"axios",hold,"Libraries",false,"AJAX library helper, should be replaced with built-in window.fetch function or use polyfill for it"
"window.fetch",adopt,"Libraries",true,"Native XMLHttpRequest api support that behaves similar to axios or other common XMLHttpRequest libraries"
"Blue DLS Vue 2",adopt,"Libraries",false,"Standard Blibli Design Language used across Blibli for Vue 2"
"Blue DLS Vue 3",trial,"Libraries",new,"Standard Blibli Design Language used across Blibli for Vue 3"
"Blue Pattern Library - Collaborative Components",assess,"Libraries",false,"DLS library published as individual components. It follow bit.dev paradigm"
"Blue Icon",adopt,"Libraries",false,"Blue standard icons. All icons are provided through this library"
"vue-i18n",adopt,"Libraries",false,"I18n support for vue. It provides multiple translation function based on our language library"
"Polyfill.io using polyfill-io-feature-detection",adopt,"Libraries",false,"Dynamic polyfill library to support older browser. We can use this to have polyfill for older browser, rather than transpiling it to older version ES"
"date-format-lite",adopt,"Libraries",false,"Lightweight date formatter and manipulator. It's only 3 KB and able to format dates properly."
"moment.js",hold,"Libraries",false,"Date formatter and manipulator, too heavy to use. Use date-format-lite instead"
"GCS",adopt,"Techniques and Platforms",false,"Google Cloud Storage for static contents. Assets are stored here. We use GCS to support faster delivery and seamless ui version upgrade"
"docker / docker-cli",adopt,"Techniques and Platforms",false,"Container management standard. This is the most widely used container management. We use atleast docker-cli to code our build script"
"NGINX",adopt,"Techniques and Platforms",false,"Default UI server. We use a lightweight http-server to serve our static content. We do some routing, rate-limiting and other simple logic here also using openresty and sub_filter plugin"
"Micro FE",adopt,"Techniques and Platforms",false,"Blibli Micro FE implementation. It shares Vue libraries and states across collabs while maintaining isolation and independent deployment"
"Window event messaging",adopt,"Techniques and Platforms",false,"Use window custom event to communicate across components from different repo or inside iframe. The best example is address-module library"
"Vue composition API",adopt,"Techniques and Platforms",false,"Functional programming for Vue. It will be more verbose and reusable to have composition api compared to options api"
"GTM",adopt,"Techniques and Platforms",false,"De-facto client-side script management. It's used across Blibli website to manage thousands of marketing and tech scripts"
"Lazy-load / Lazy-rendering",adopt,"Techniques and Platforms",false,"Only load or render inside viewport content. Do not load everything at once. Use Observer pattern to detect location in viewport"
"web.dev - Web Core Vitals",adopt,"Techniques and Platforms",false,"Measurement standard for web. Go to web.dev for more info"
"Sonar 8",adopt,"Techniques and Platforms",false,"Static Code Analyzer for test coverage and potential risk."
"podman",assess,"Techniques and Platforms",new,"Free Container management. This is popular alternative of docker in Mac. Having some problem with pushing large image library to dockerhub, may get hold"
"Rancher Desktop",assess,"Techniques and Platforms",new,"Docker desktop replacement. Still ongoing to test it all through. The best thing is that it supports docker-cli."
"Web Canary Release",trial,"Techniques and Platforms",true,"Safe release to only internal user. We route request to 'newest' version only for internal"
"Docker desktop",hold,"Techniques and Platforms",false,"Container management UI and dashboard. This is the UI of docker."
"Global Variable in Micro FE",hold,"Techniques and Platforms",false,"Avoid using shared global variable, hard to maintain. We can not really sure if the global variable is not used in other collab."
"FE Unit test",hold,"Techniques and Platforms",false,"Unit test in Frontend can not really shows changes and backward compatibility (integrity) of our UI. It should be replaced by UI Integration Test"
"FE Integration test",adopt,"Techniques and Platforms",new,"Provides snapshots and integrity checking for our UI. It shows before and after for every changes to review properly"
"Hybrid Rendering",assess,"Techniques and Platforms",new,"Using Nuxt 3, we can Hydrate components for faster rendering client"
"Multi Layered NGINX Gateway (Squad Gateway)",trial,"Techniques and Platforms",new,"Instead of using only one routing in Blibli Gateway, we want to have detailed routing moved to each squad. So, there will be less risk and effort on maintaining Blibli Gateway"
"Modern JS Output for Modern browser (ES6+)",assess,"Techniques and Platforms",new,"Output adaptive output when building codes. It will most probably use ES6+ standards when possible and falback to ES2005 when not possible."
